name: CI-CD

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  ### 1. FRONTEND
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install frontend dependencies
        run: npm ci

      - name: Type-check (TypeScript)
        run: npx tsc --noEmit

      #- name: Lint
      #  run: npm run lint

      #- name: Run tests
      #  run: npm test

      #- name: Build frontend
      #  run: npm run build

  ### 2. BACKEND
  backend:
    name: Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        run: pip install poetry

      - name: Install backend dependencies
        run: poetry install

      - name: Ensure coverage directory exists
        run: mkdir -p coverage_reports/backend/

      - name: Lint code
        run: poetry run pylint src

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=src --cov-report=term-missing \
            --cov-report=xml:../coverage_reports/backend/coverage.xml tests
          poetry run coverage html -d ../coverage_reports/backend/htmlcov

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage_reports/backend/coverage.xml
          fail_ci_if_error: true

  ### 3. ROBOT TESTS (UI)
  # robot-tests:
  #   if: github.event_name == 'pull_request' || github.ref_name == 'main'

  #   name: Robot Framework UI Tests (E2E)
  #   runs-on: ubuntu-latest
  #   needs: [frontend, backend]
  #   defaults:
  #     run:
  #       working-directory: e2e

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup Chromedriver
  #       uses: nanasess/setup-chromedriver@master

  #     - name: Start virtual display for UI tests
  #       run: |
  #         export DISPLAY=:99
  #         chromedriver --url-base=/wd/hub &
  #         sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

  #     - name: Run Robot Framework E2E tests
  #       run: bash run_robot_tests.sh

  ### 4. BUILD & PUSH DOCKER IMAGES
  docker:
    name: Docker
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    needs: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push Docker image
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ecopaths:staging
            ${{ secrets.DOCKER_USERNAME }}/ecopaths:${{ github.sha }}
