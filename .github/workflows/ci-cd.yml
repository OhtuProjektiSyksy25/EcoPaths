name: CI-CD

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  ### 1. FRONTEND
  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install frontend dependencies
        run: npm ci

      - name: Type-check (TypeScript)
        run: npx tsc --noEmit

      #- name: Lint
      #  run: npm run lint

      #- name: Run tests
      #  run: npm test

      #- name: Build frontend
      #  run: npm run build

      # - name: Build & push Docker
      #   if: github.event_name == 'pull_request' || github.ref_name == 'main'
      #   run: |
      #     docker build -t ghcr.io/<org>/<repo>/frontend:${{ github.sha }} .
      #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      #     docker push ghcr.io/<org>/<repo>/frontend:${{ github.sha }}


  ### 2. BACKEND
  backend:
    name: Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        run: pip install poetry

      - name: Install backend dependencies
        run: poetry install

      - name: Ensure coverage directory exists
        run: mkdir -p coverage_reports/backend/

      - name: Lint code
        run: poetry run pylint src

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=src --cov-report=term-missing \
            --cov-report=xml:../coverage_reports/backend/coverage.xml tests
          poetry run coverage html -d ../coverage_reports/backend/htmlcov

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage_reports/backend/coverage.xml
          fail_ci_if_error: true

      # - name: Build & push Docker
      #   if: github.event_name == 'pull_request' || github.ref_name == 'main'
      #   run: |
      #     docker build -t ghcr.io/<org>/<repo>/backend:${{ github.sha }} .
      #     echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      #     docker push ghcr.io/<org>/<repo>/backend:${{ github.sha }}
       

  ### 3. ROBOT TESTS (UI)
  robot-tests:
    name: Robot Framework UI Tests (E2E)
    runs-on: ubuntu-latest
    needs: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Robot Framework
        run: |
          pip install robotframework
          pip install robotframework-seleniumlibrary

      - name: Setup Chromedriver
        uses: nanasess/setup-chromedriver@master

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Start virtual display for UI tests
        run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &

      - name: Start frontend application
        working-directory: frontend
        run: | 
          npm start &
          sleep 30

      - name: Run Robot Framework E2E tests
        run: robot --outputdir e2e/results e2e/


  ### 4. DEPLOY TO OPENSHIFT
  # deploy-openshift:
  #   if: github.ref_name == 'main'  
  #   name: Deploy to OpenShift
  #   runs-on: ubuntu-latest
  #   needs: [frontend, backend]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Setup OpenShift CLI
  #       uses: redhat-actions/oc-login@v2
  #       with:
  #         openshift_server_url: ${{ secrets.OPENSHIFT_URL }}
  #         token: ${{ secrets.OPENSHIFT_TOKEN }}

  #     - name: Login to OpenShift
  #       run: |
  #         oc login ${{ secrets.OPENSHIFT_URL }} --token=${{ secrets.OPENSHIFT_TOKEN }} --insecure-skip-tls-verify

  #     - name: Set OpenShift project/namespace
  #       run: oc project my-namespace  # vaihda omaan

  #     - name: Update backend image
  #       run: |
  #         oc set image deployment/backend backend=ghcr.io/<org>/<repo>/backend:${{ github.sha }} --record

  #     - name: Update frontend image
  #       run: |
  #         oc set image deployment/frontend frontend=ghcr.io/<org>/<repo>/frontend:${{ github.sha }} --record

  #     - name: Rollout status
  #       run: |
  #         oc rollout status deployment/backend
  #         oc rollout status deployment/frontend